@page "/session/{Page}"
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject IFilmService FilmeService
@inject IUserService UserService
@inject ISessionService SessionService
@inject IRoomService RoomService
@inject IAlertService AlertService
@inject NavigationManager navManager
@inject PrintWayy.Cinema.Presentation.BlazorServer.Shared.PageHistoryState PageHistoryState

<h1>Sessões</h1>
<br />

<div class="row mb-3">
    <div class="col-md-7">
        @if (LoggedIn)
        {
            <NavLink href="/session/create" class="btn btn-sm btn-success mb-2">Cadastrar Sessão</NavLink>
        }
    </div>
    <div class="col-md-7">
    </div>
    <div class="input-group col-md-5 text-md-right">
        <input name="sessionModelSearchInput" type="date" class="form-control" @bind="this.SearchTerm" @onkeyup="SearchBoxKeyPress" />
        <div class="input-group-btn">
            <button name="sessionModelSearchInput" class="btn btn-default" @onclick="SearchClick">
                <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
            </button>
        </div>
        <div class="input-group-btn">
            <button name="sessionModelSearchClear" class="btn btn-default" @onclick="ClearSearch">
                <i class="oi oi-x" title="clear" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>

@if (session == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th style="width:15%">Data</th>
                <th style="width:10%">Hora de Início</th>
                <th style="width:15%">Animação</th>
                <th style="width:15%">Audio</th>
                <th style="width:10%">Valor</th>
                <th style="width:20%">Filme</th>
                <th style="width:10%">Sala</th>
                <th style="width:5%"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var session in session?.Results)
            {
                <tr>
                    <td>@session.Date.ToShortDateString()</td>
                    <td>@session.StartTime</td>
                    <td>@session.AnimationType.GetDescription()</td>
                    <td>@session.AudioType.GetDescription()</td>
                    <td>@session.EntryValue</td>
                    <td>@films.FirstOrDefault(_=>_.Id == session.FilmId)?.Title</td>
                    <td>@rooms.Find(_=>_.Name == session.RoomName)?.Name</td>
                    <td style="white-space: nowrap">
                        @if (LoggedIn)
                        {
                            @if (session.IsDeleting)
                            {
                                <button @onclick="@(() => DeleteSession(session))" disabled="@session.IsDeleting" class=" btn btn-link oi oi-trash text-danger">
                                    <span class="spinner-border spinner-border-sm"></span>
                                </button>
                            }
                            else
                            {
                                <button @onclick="@(() => DeleteSession(session))" disabled="@session.IsDeleting" class=" btn btn-link oi oi-trash text-danger">
                                    <span></span>
                                </button>
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Pager Result=@session PageChanged=PagerPageChanged />
}

@code {
    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public DateTime SearchTerm { get; set; } = DateTime.Now;
    protected PagedResult<Session> session;
    protected IEnumerable<Film> films = new List<Film>();
    protected IEnumerable<Session> sessions = new List<Session>();
    protected List<Domain.Models.Room> rooms = new List<Domain.Models.Room>();
    public bool LoggedIn
    {
        get { return UserService.User != null; }
    }
    protected async override void OnInitialized()
    {
        films = await FilmeService.GetAll();
        rooms = await RoomService.GetAll();
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        sessions = await SessionService.GetAll();
        session = await SessionService.GetSessionByDay(null, Page, sessions);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        sessions = await SessionService.GetAll();
        if (SearchTerm == DateTime.Now)
        {
            session = await SessionService.GetSessionByDay(null, Page, sessions);
            return;
        }
        session = await SessionService.GetSessionByDay(SearchTerm, Page, sessions);
        StateHasChanged();
    }

    protected async Task ClearSearch()
    {
        SearchTerm = DateTime.Now;
        sessions = await SessionService.GetAll();
        session = await SessionService.GetSessionByDay(null, Page, sessions);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/session/" + page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    private async void DeleteSession(Session _session)
    {
        try
        {
            _session.IsDeleting = true;
            await SessionService.RemoveSession(_session.Id);
            AlertService.Success("Sessão removida com sucesso!");
            sessions = await SessionService.GetAll();
            session = await SessionService.GetSessionByDay(null, Page, sessions);
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            _session.IsDeleting = false;
        }

        StateHasChanged();
    }
}