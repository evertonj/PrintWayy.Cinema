@page "/user/login"
@inject IUserService UserService
@inject IAlertService AlertService
@inject NavigationManager navManager
@inject PrintWayy.Cinema.Presentation.BlazorServer.Shared.PageHistoryState PageHistoryState

<div class="col-md-6 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">Login</h4>
        <div class="card-body">
            <EditForm Model="@loginModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Usuário</label>
                    <InputText @bind-Value="loginModel.Username" id="username" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Username)" />
                </div>
                <div class="form-group">
                    <label>Senha</label>
                    <InputText @bind-Value="loginModel.Password" type="password" id="password" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
                <div class="form-group" style="margin-top: 7px;">
                     <button disabled="@loading" class="btn btn-primary" id="login_button">
                    @if (loading) 
                    {
                        <span class="spinner-border spinner-border-sm mr-2"></span>
                    }
                    <b>Login</b>
                </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Models.Login loginModel = new Models.Login();
    private bool loading;

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
            await UserService.Login(loginModel);
            var returnUrl = navManager.QueryString("returnUrl") ?? "";
            if (returnUrl != string.Empty)
            {
                navManager.NavigateTo(returnUrl);
            }
                else{
                if (PageHistoryState.CanGoBack()){
                    navManager.NavigateTo(PageHistoryState.GetGoBackPage());
                }
                else{
                    navManager.NavigateTo("/");
                }
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}