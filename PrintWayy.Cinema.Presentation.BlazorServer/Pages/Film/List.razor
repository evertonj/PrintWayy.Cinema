@page "/film/{Page}"
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject IFilmService FilmeService
@inject IAlertService AlertService
@inject NavigationManager navManager
@inject PrintWayy.Cinema.Presentation.BlazorServer.Shared.PageHistoryState PageHistoryState

<h1>Filmes</h1>
<br />

<div class="row mb-3">
    <div class="col-md-7">
        <NavLink href="/film/create" class="btn btn-sm btn-success mb-2">Cadastrar Filme</NavLink>
    </div>
    <div class="col-md-7">
    </div>
    <div class="input-group col-md-5 text-md-right">
        <input name="FilmViewModelSearchInput" type="text" class="form-control" placeholder="Título" @bind="this.SearchTerm" @onkeyup="SearchBoxKeyPress" />
        <div class="input-group-btn">
            <button name="FilmViewModelSearchButton" class="btn btn-default" @onclick="SearchClick">
                <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
            </button>
        </div>
        <div class="input-group-btn">
            <button name="FilmViewModelSearchClear" class="btn btn-default" @onclick="ClearSearch">
                <i class="oi oi-x" title="clear" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>

@if (film == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th style="width:25%">Título</th>
                <th style="width:25%">Descrição</th>
                <th style="width:20%">Duração</th>
                <th style="width:10%">Imagem</th>
                <th style="width:10%"></th>
                <th style="width:10%"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var filmViewModel in film?.Results)
            {
                <tr>
                    <td>@filmViewModel.Title</td>
                    <td>@filmViewModel.Description</td>
                    <td>@filmViewModel.Duration</td>
                    <td style="white-space: nowrap"><NavLink href="@($"/film/view/{filmViewModel.Id}")" class="oi oi-eye text-primary"></NavLink></td>
                    <td style="white-space: nowrap"><NavLink href="@($"/film/update/{filmViewModel.Id}")" class="oi oi-pencil text-warning"></NavLink></td>
                    <td style="white-space: nowrap">

                        @if (filmViewModel.IsDeleting)
                        {
                            <button @onclick="@(() => DeleteFilmViewModel(filmViewModel))" disabled="@filmViewModel.IsDeleting" class=" btn btn-link oi oi-trash text-danger">
                                <span class="spinner-border spinner-border-sm"></span>
                            </button>
                        }
                        else
                        {
                            <button @onclick="@(() => DeleteFilmViewModel(filmViewModel))" disabled="@filmViewModel.IsDeleting" class=" btn btn-link oi oi-trash text-danger">
                                <span></span>
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Pager Result=@film PageChanged=PagerPageChanged />
}

@code {
    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;
    protected PagedResult<Film> film;
    private IEnumerable<Film> films = new List<Film>();

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        films = await FilmeService.GetAll();
        film = await FilmeService.GetFilm(null, Page, films);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        films = await FilmeService.GetAll();
        if (string.IsNullOrEmpty(SearchTerm))
        {
            film = await FilmeService.GetFilm(null, Page, films);
            return;
        }
        film = await FilmeService.GetFilm(SearchTerm, Page, films);
        StateHasChanged();
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        films = await FilmeService.GetAll();
        film = await FilmeService.GetFilm(SearchTerm, Page, films);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/film/" + page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    private async void DeleteFilmViewModel(Film _filmViewModel)
    {
        var filmViewModel = _filmViewModel;
        filmViewModel.IsDeleting = true;
        await FilmeService.DeleteFilmViewModel(filmViewModel.Id);
        films = await FilmeService.GetAll();
        film = await FilmeService.GetFilm(null, Page, films);
        StateHasChanged();
    }
}