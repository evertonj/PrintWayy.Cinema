@inject PrintWayy.Cinema.Presentation.BlazorServer.Shared.PageHistoryState PageHistoryState

<EditForm Model="@filmViewModel" OnSubmit="@OnValidSubmit">
    <FluentValidator TValidator="FilmValidator" />
    <div class="form-group">
        <label>Titulo :</label>
        <div>
            <InputText @bind-Value="@filmViewModel.Title" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => filmViewModel.Title)" />
        </div>
    </div>
    <div class="form-group">
        <label>Descrição :</label>
        <div>
            <InputText @bind-Value="@filmViewModel.Description" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => filmViewModel.Description)" />
        </div>
    </div>
     <div class="form-group">
        <label>Duração :</label>
        <div>
            <InputText @bind-Value="@filmViewModel.Duration" class="form-control col-sm-3" placeholder="00:00:00" />
            <ValidationMessage For="@(() => filmViewModel.Duration)" />
        </div>
    </div>
    <div class="form-group ">
        <div>
            <label>Imagem :</label>
            <div>
                <InputFile OnChange="@SelectFile" class="form-control col-sm-3"/>
            </div>
        </div>
    </div>
    <hr/>

    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading) 
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            @ButtonText
        </button>
        @if (PageHistoryState.CanGoBack()){
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancelar</NavLink>
        }
        else{
            <NavLink href="/film/1" class="btn btn-link">Voltar</NavLink>
        }
    </div>

</EditForm>

@code {
    [Parameter]
    public Film filmViewModel { get; set; }
    [Parameter]
    public string ButtonText { get; set; } = "Cadastrar";
    [Parameter]
    public bool loading {get; set;} = false;
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private StreamContent fileContent;
    private string fileName;
    private string imgUrl;
    private string imageType;

      private async Task SelectFile(InputFileChangeEventArgs  e)
    {
       // setting the max size for the file 
       long maxFileSize = 1024 * 1024 * 10;
       // Provide the HTTP Content based Stream
       // and open the stream for reading the uploaded file
       fileContent = new StreamContent(e.File.OpenReadStream(maxFileSize));
       // read file name
       fileName = e.File.Name;

       var fileSize = new byte[e.File.Size];
       // read the file bytes in sequence
       await e.File.OpenReadStream().ReadAsync(fileSize);
       // read file content type
       imageType = e.File.ContentType;
       // create URL
       imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(fileSize)}";

       this.StateHasChanged();
    } 
}