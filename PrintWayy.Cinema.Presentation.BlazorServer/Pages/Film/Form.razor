@inject PrintWayy.Cinema.Presentation.BlazorServer.Shared.PageHistoryState PageHistoryState

<EditForm Model="@filmViewModel" OnSubmit="@OnValidSubmit">
    <FluentValidator TValidator="FilmValidator" />
    <div class="form-group">
        <label>Título :</label>
        <div>
            <InputText @bind-Value="@filmViewModel.Title" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => filmViewModel.Title)" />
        </div>
    </div>
    <div class="form-group">
        <label>Descrição :</label>
        <div>
            <InputText @bind-Value="@filmViewModel.Description" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => filmViewModel.Description)" />
        </div>
    </div>
    <div class="form-group">
        <label>Duração :</label>
        <div>
            <InputText @bind-Value="@filmViewModel.Duration" class="form-control col-sm-3" placeholder="00:00:00" />
            <ValidationMessage For="@(() => filmViewModel.Duration)" />
        </div>
    </div>
    <div class="form-group ">
        <div>
            <label>Imagem :</label>
            <div>
                <InputFile OnChange="@Upload" class="form-control col-sm-3" accept="image/*" />
            </div>
        </div>
    </div>
    <hr />

    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            @ButtonText
        </button>
        @if (PageHistoryState.CanGoBack())
        {
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancelar</NavLink>
        }
        else
        {
            <NavLink href="/film/1" class="btn btn-link">Voltar</NavLink>
        }
    </div>

</EditForm>

@code {
    [Parameter]
    public Film filmViewModel { get; set; }
    [Parameter]
    public string ButtonText { get; set; } = "Cadastrar";
    [Parameter]
    public bool loading { get; set; } = false;
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private async Task Upload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480);
        var buf = new byte[resizedFile.Size];
        using (var stream = resizedFile.OpenReadStream())
        {
            await stream.ReadAsync(buf);
        }
        filmViewModel.ImageBase64 = new Domain.Models.ImageData();
        filmViewModel.ImageBase64.ImageBase64 = Convert.ToBase64String(buf);
        filmViewModel.ImageBase64.ContentType = e.File.ContentType;
        filmViewModel.ImageBase64.FileName = e.File.Name;
    }
}
